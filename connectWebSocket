// connectWebSocket (Retool Query)
// **קריטי:** קבל את הנתונים מ-additionalScope
const chatId = additionalScope.chat_id_param;
const userId = additionalScope.user_id_param;
const username = additionalScope.username_param;

try {
    console.log('Starting WebSocket connection...');
    let reconnectAttempts = 0;
    const maxReconnectAttempts = 3;
    const reconnectDelay = 5000;

    // אין צורך בבדיקת נתונים חסרים כאן שוב, כי בדקנו ב-Global JS.
    // אין צורך בלוגיקת סגירת חיבור ישן כאן, כי זה יטופל ב-Global JS.

    const connect = async () => { // **async**
        // **חשוב:** אין צורך בלוגיקת סגירת חיבור ישן כאן, היא ב-Global JS כעת.
        // אם `window.myGlobalWebSocket` כבר פתוח ל-chatId הנכון, זה יטופל ב-Global JS.
        // כאן נניח שאנחנו מתבקשים לפתוח חיבור חדש.

        const currentSocketInstance = new WebSocket('wss://chat.futureflow.co.il/');
        console.log('WebSocket object created:', currentSocketInstance);

        currentSocketInstance.onopen = function() {
            console.log('WebSocket connection opened!');
            window.myGlobalWebSocket = this; // שומר את האובייקט הגלובלי
            // אם אתה רוצה לשמור metadata ב-global socket:
            // window.myGlobalWebSocket.metadata = { chat_id: chatId, userId: userId, username: username }; 
            console.log('WebSocket instance saved to window.myGlobalWebSocket:', window.myGlobalWebSocket);

            this.send(JSON.stringify({
                chat_id: chatId, // השתמש בפרמטר שהתקבל
                created_by: userId, // השתמש בפרמטר שהתקבל
                sender_name: username, // השתמש בפרמטר שהתקבל
                type: "JOIN_CHAT"
            }));
            console.log('JOIN_CHAT message sent successfully.');
            reconnectAttempts = 0;

            this.onmessage = (event) => { /* ... (קוד onmessage קיים, עם גישה ל-chatComponent1.X.value) ... */ };
            if (pendingMessage.value) { /* ... */ }
        };

        currentSocketInstance.onclose = function() { /* ... (קוד onclose קיים) ... */ };
        currentSocketInstance.onerror = function(error) { /* ... (קוד onerror קיים) ... */ };
    };

    await connect();
} catch (error) {
    console.error('Error in connectWebSocket Query:', error);
    if (window.myGlobalWebSocket) {
        window.myGlobalWebSocket = null;
    }
}
